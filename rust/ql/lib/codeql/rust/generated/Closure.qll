// generated by codegen
/**
 * This module provides the generated definition of `Closure`.
 * INTERNAL: Do not import directly.
 */

private import codeql.rust.generated.Synth
private import codeql.rust.generated.Raw
import codeql.rust.elements.Expr
import codeql.rust.elements.Pat
import codeql.rust.elements.TypeRef

/**
 * INTERNAL: This module contains the fully generated definition of `Closure` and should not
 * be referenced directly.
 */
module Generated {
  /**
   * INTERNAL: Do not reference the `Generated::Closure` class directly.
   * Use the subclass `Closure`, where the following predicates are available.
   */
  class Closure extends Synth::TClosure, Expr {
    override string getAPrimaryQlClass() { result = "Closure" }

    /**
     * Gets the `index`th argument of this closure (0-based).
     */
    Pat getArg(int index) {
      result =
        Synth::convertPatFromRaw(Synth::convertClosureToRaw(this).(Raw::Closure).getArg(index))
    }

    /**
     * Gets any of the arguments of this closure.
     */
    final Pat getAnArg() { result = this.getArg(_) }

    /**
     * Gets the number of arguments of this closure.
     */
    final int getNumberOfArgs() { result = count(int i | exists(this.getArg(i))) }

    /**
     * Gets the `index`th argument type of this closure (0-based).
     */
    TypeRef getArgType(int index) {
      result =
        Synth::convertTypeRefFromRaw(Synth::convertClosureToRaw(this)
              .(Raw::Closure)
              .getArgType(index))
    }

    /**
     * Gets any of the argument types of this closure.
     */
    final TypeRef getAnArgType() { result = this.getArgType(_) }

    /**
     * Gets the number of argument types of this closure.
     */
    final int getNumberOfArgTypes() { result = count(int i | exists(this.getArgType(i))) }

    /**
     * Gets the ret type of this closure, if it exists.
     */
    TypeRef getRetType() {
      result =
        Synth::convertTypeRefFromRaw(Synth::convertClosureToRaw(this).(Raw::Closure).getRetType())
    }

    /**
     * Holds if `getRetType()` exists.
     */
    final predicate hasRetType() { exists(this.getRetType()) }

    /**
     * Gets the body of this closure.
     */
    Expr getBody() {
      result = Synth::convertExprFromRaw(Synth::convertClosureToRaw(this).(Raw::Closure).getBody())
    }

    /**
     * Holds if this closure is move.
     */
    predicate isMove() { Synth::convertClosureToRaw(this).(Raw::Closure).isMove() }
  }
}
