// generated by codegen
/**
 * This module provides the generated definition of `Call`.
 * INTERNAL: Do not import directly.
 */

private import codeql.rust.generated.Synth
private import codeql.rust.generated.Raw
import codeql.rust.elements.Expr

/**
 * INTERNAL: This module contains the fully generated definition of `Call` and should not
 * be referenced directly.
 */
module Generated {
  /**
   * INTERNAL: Do not reference the `Generated::Call` class directly.
   * Use the subclass `Call`, where the following predicates are available.
   */
  class Call extends Synth::TCall, Expr {
    override string getAPrimaryQlClass() { result = "Call" }

    /**
     * Gets the callee of this call.
     */
    Expr getCallee() {
      result = Synth::convertExprFromRaw(Synth::convertCallToRaw(this).(Raw::Call).getCallee())
    }

    /**
     * Gets the `index`th argument of this call (0-based).
     */
    Expr getArg(int index) {
      result = Synth::convertExprFromRaw(Synth::convertCallToRaw(this).(Raw::Call).getArg(index))
    }

    /**
     * Gets any of the arguments of this call.
     */
    final Expr getAnArg() { result = this.getArg(_) }

    /**
     * Gets the number of arguments of this call.
     */
    final int getNumberOfArgs() { result = count(int i | exists(this.getArg(i))) }

    /**
     * Holds if this call is assignee expression.
     */
    predicate isAssigneeExpr() { Synth::convertCallToRaw(this).(Raw::Call).isAssigneeExpr() }
  }
}
