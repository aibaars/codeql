// generated by codegen
/**
 * This module provides the generated definition of `Block`.
 * INTERNAL: Do not import directly.
 */

private import codeql.rust.generated.Synth
private import codeql.rust.generated.Raw
import codeql.rust.elements.Expr
import codeql.rust.elements.Stmt

/**
 * INTERNAL: This module contains the fully generated definition of `Block` and should not
 * be referenced directly.
 */
module Generated {
  /**
   * INTERNAL: Do not reference the `Generated::Block` class directly.
   * Use the subclass `Block`, where the following predicates are available.
   */
  class Block extends Synth::TBlock, Expr {
    /**
     * Gets the `index`th statement of this block (0-based).
     */
    Stmt getStatement(int index) {
      result =
        Synth::convertStmtFromRaw(Synth::convertBlockToRaw(this).(Raw::Block).getStatement(index))
    }

    /**
     * Gets any of the statements of this block.
     */
    final Stmt getAStatement() { result = this.getStatement(_) }

    /**
     * Gets the number of statements of this block.
     */
    final int getNumberOfStatements() { result = count(int i | exists(this.getStatement(i))) }

    /**
     * Gets the tail of this block, if it exists.
     */
    Expr getTail() {
      result = Synth::convertExprFromRaw(Synth::convertBlockToRaw(this).(Raw::Block).getTail())
    }

    /**
     * Holds if `getTail()` exists.
     */
    final predicate hasTail() { exists(this.getTail()) }

    /**
     * Gets the label of this block, if it exists.
     */
    string getLabel() { result = Synth::convertBlockToRaw(this).(Raw::Block).getLabel() }

    /**
     * Holds if `getLabel()` exists.
     */
    final predicate hasLabel() { exists(this.getLabel()) }
  }
}
