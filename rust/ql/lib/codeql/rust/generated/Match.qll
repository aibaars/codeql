// generated by codegen
/**
 * This module provides the generated definition of `Match`.
 * INTERNAL: Do not import directly.
 */

private import codeql.rust.generated.Synth
private import codeql.rust.generated.Raw
import codeql.rust.elements.Expr
import codeql.rust.elements.MatchArm

/**
 * INTERNAL: This module contains the fully generated definition of `Match` and should not
 * be referenced directly.
 */
module Generated {
  /**
   * INTERNAL: Do not reference the `Generated::Match` class directly.
   * Use the subclass `Match`, where the following predicates are available.
   */
  class Match extends Synth::TMatch, Expr {
    override string getAPrimaryQlClass() { result = "Match" }

    /**
     * Gets the expression of this match.
     */
    Expr getExpr() {
      result = Synth::convertExprFromRaw(Synth::convertMatchToRaw(this).(Raw::Match).getExpr())
    }

    /**
     * Gets the `index`th branch of this match (0-based).
     */
    MatchArm getBranch(int index) {
      result =
        Synth::convertMatchArmFromRaw(Synth::convertMatchToRaw(this).(Raw::Match).getBranch(index))
    }

    /**
     * Gets any of the branches of this match.
     */
    final MatchArm getABranch() { result = this.getBranch(_) }

    /**
     * Gets the number of branches of this match.
     */
    final int getNumberOfBranches() { result = count(int i | exists(this.getBranch(i))) }
  }
}
