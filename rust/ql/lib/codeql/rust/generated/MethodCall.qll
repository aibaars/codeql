// generated by codegen
/**
 * This module provides the generated definition of `MethodCall`.
 * INTERNAL: Do not import directly.
 */

private import codeql.rust.generated.Synth
private import codeql.rust.generated.Raw
import codeql.rust.elements.Expr

/**
 * INTERNAL: This module contains the fully generated definition of `MethodCall` and should not
 * be referenced directly.
 */
module Generated {
  /**
   * INTERNAL: Do not reference the `Generated::MethodCall` class directly.
   * Use the subclass `MethodCall`, where the following predicates are available.
   */
  class MethodCall extends Synth::TMethodCall, Expr {
    override string getAPrimaryQlClass() { result = "MethodCall" }

    /**
     * Gets the receiver of this method call.
     */
    Expr getReceiver() {
      result =
        Synth::convertExprFromRaw(Synth::convertMethodCallToRaw(this)
              .(Raw::MethodCall)
              .getReceiver())
    }

    /**
     * Gets the method name of this method call.
     */
    string getMethodName() {
      result = Synth::convertMethodCallToRaw(this).(Raw::MethodCall).getMethodName()
    }

    /**
     * Gets the `index`th argument of this method call (0-based).
     */
    Expr getArg(int index) {
      result =
        Synth::convertExprFromRaw(Synth::convertMethodCallToRaw(this)
              .(Raw::MethodCall)
              .getArg(index))
    }

    /**
     * Gets any of the arguments of this method call.
     */
    final Expr getAnArg() { result = this.getArg(_) }

    /**
     * Gets the number of arguments of this method call.
     */
    final int getNumberOfArgs() { result = count(int i | exists(this.getArg(i))) }
  }
}
