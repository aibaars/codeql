// generated by codegen
/**
 * This module provides the generated definition of `Range`.
 * INTERNAL: Do not import directly.
 */

private import codeql.rust.generated.Synth
private import codeql.rust.generated.Raw
import codeql.rust.elements.Expr

/**
 * INTERNAL: This module contains the fully generated definition of `Range` and should not
 * be referenced directly.
 */
module Generated {
  /**
   * INTERNAL: Do not reference the `Generated::Range` class directly.
   * Use the subclass `Range`, where the following predicates are available.
   */
  class Range extends Synth::TRange, Expr {
    override string getAPrimaryQlClass() { result = "Range" }

    /**
     * Gets the lhs of this range, if it exists.
     */
    Expr getLhs() {
      result = Synth::convertExprFromRaw(Synth::convertRangeToRaw(this).(Raw::Range).getLhs())
    }

    /**
     * Holds if `getLhs()` exists.
     */
    final predicate hasLhs() { exists(this.getLhs()) }

    /**
     * Gets the rhs of this range, if it exists.
     */
    Expr getRhs() {
      result = Synth::convertExprFromRaw(Synth::convertRangeToRaw(this).(Raw::Range).getRhs())
    }

    /**
     * Holds if `getRhs()` exists.
     */
    final predicate hasRhs() { exists(this.getRhs()) }

    /**
     * Holds if this range is inclusive.
     */
    predicate isInclusive() { Synth::convertRangeToRaw(this).(Raw::Range).isInclusive() }
  }
}
