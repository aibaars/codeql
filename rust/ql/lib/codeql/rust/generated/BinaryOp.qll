// generated by codegen
/**
 * This module provides the generated definition of `BinaryOp`.
 * INTERNAL: Do not import directly.
 */

private import codeql.rust.generated.Synth
private import codeql.rust.generated.Raw
import codeql.rust.elements.Expr

/**
 * INTERNAL: This module contains the fully generated definition of `BinaryOp` and should not
 * be referenced directly.
 */
module Generated {
  /**
   * INTERNAL: Do not reference the `Generated::BinaryOp` class directly.
   * Use the subclass `BinaryOp`, where the following predicates are available.
   */
  class BinaryOp extends Synth::TBinaryOp, Expr {
    override string getAPrimaryQlClass() { result = "BinaryOp" }

    /**
     * Gets the lhs of this binary op.
     */
    Expr getLhs() {
      result = Synth::convertExprFromRaw(Synth::convertBinaryOpToRaw(this).(Raw::BinaryOp).getLhs())
    }

    /**
     * Gets the rhs of this binary op.
     */
    Expr getRhs() {
      result = Synth::convertExprFromRaw(Synth::convertBinaryOpToRaw(this).(Raw::BinaryOp).getRhs())
    }

    /**
     * Gets the op of this binary op, if it exists.
     */
    string getOp() { result = Synth::convertBinaryOpToRaw(this).(Raw::BinaryOp).getOp() }

    /**
     * Holds if `getOp()` exists.
     */
    final predicate hasOp() { exists(this.getOp()) }
  }
}
