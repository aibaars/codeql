// generated by codegen
/**
 * This module provides the generated definition of `SlicePat`.
 * INTERNAL: Do not import directly.
 */

private import codeql.rust.generated.Synth
private import codeql.rust.generated.Raw
import codeql.rust.elements.Pat

/**
 * INTERNAL: This module contains the fully generated definition of `SlicePat` and should not
 * be referenced directly.
 */
module Generated {
  /**
   * INTERNAL: Do not reference the `Generated::SlicePat` class directly.
   * Use the subclass `SlicePat`, where the following predicates are available.
   */
  class SlicePat extends Synth::TSlicePat, Pat {
    override string getAPrimaryQlClass() { result = "SlicePat" }

    /**
     * Gets the `index`th prefix of this slice pat (0-based).
     */
    Pat getPrefix(int index) {
      result =
        Synth::convertPatFromRaw(Synth::convertSlicePatToRaw(this).(Raw::SlicePat).getPrefix(index))
    }

    /**
     * Gets any of the prefixes of this slice pat.
     */
    final Pat getAPrefix() { result = this.getPrefix(_) }

    /**
     * Gets the number of prefixes of this slice pat.
     */
    final int getNumberOfPrefixes() { result = count(int i | exists(this.getPrefix(i))) }
  }
}
