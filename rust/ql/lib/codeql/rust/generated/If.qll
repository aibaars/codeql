// generated by codegen
/**
 * This module provides the generated definition of `If`.
 * INTERNAL: Do not import directly.
 */

private import codeql.rust.generated.Synth
private import codeql.rust.generated.Raw
import codeql.rust.elements.Expr

/**
 * INTERNAL: This module contains the fully generated definition of `If` and should not
 * be referenced directly.
 */
module Generated {
  /**
   * INTERNAL: Do not reference the `Generated::If` class directly.
   * Use the subclass `If`, where the following predicates are available.
   */
  class If extends Synth::TIf, Expr {
    override string getAPrimaryQlClass() { result = "If" }

    /**
     * Gets the condition of this if.
     */
    Expr getCondition() {
      result = Synth::convertExprFromRaw(Synth::convertIfToRaw(this).(Raw::If).getCondition())
    }

    /**
     * Gets the then branch of this if.
     */
    Expr getThenBranch() {
      result = Synth::convertExprFromRaw(Synth::convertIfToRaw(this).(Raw::If).getThenBranch())
    }

    /**
     * Gets the else branch of this if, if it exists.
     */
    Expr getElseBranch() {
      result = Synth::convertExprFromRaw(Synth::convertIfToRaw(this).(Raw::If).getElseBranch())
    }

    /**
     * Holds if `getElseBranch()` exists.
     */
    final predicate hasElseBranch() { exists(this.getElseBranch()) }
  }
}
